# -*- coding: utf-8 -*-
"""CV-Object Detection with model Yolo3_darknet53_coco.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ixSmP9Q4WSlbm6It14k1HM7M0iGqQ8Dx

Project Description : CV task with objective to detect number of people in the images provided. The CV task is trained using Yolo3_darknet53_coco model (A famous model for object detection & fast in processing speed).

### 1. Import Dependencies Library
"""

import mxnet as mx
from mxnet import image
from mxnet.gluon.data.vision import transforms
import gluoncv as gcv
import hashlib
from pylab import rcParams
from matplotlib import pyplot as plt
from gluoncv import model_zoo, data, utils
import numpy as np
import os
import glob
from pathlib import Path

rcParams['figure.figsize'] = 5, 10

"""##### Look at number of available models in the library"""

for model in gcv.model_zoo.get_model_list():
    print(model)

"""### 2. Load Model - Yolo3_darknet53_coco"""

# Specify the selected model to use for object detection

network = gcv.model_zoo.get_model('yolo3_darknet53_coco', pretrained=True)

"""### 3. Specify image location for loading"""

def load_image(filepath):

    return mx.image.imread(filepath)

test_filepath = 'drive/My Drive/Courses_Workshop_Conferences/test/gluoncv_assignment6/32742378405_3ecc8cc958_b.jpg'
test_output = load_image(test_filepath)

"""##### Display the image before transform"""

plt.imshow(test_output.asnumpy())
# fig = plt.gcf()
# fig.set_size_inches(14, 14)
# plt.show()

"""##### Transforming an image"""

def transform_image(array):

    norm_image = gcv.data.transforms.presets.yolo.transform_test(array)
    unnorm_image = norm_image[1]
    
    return norm_image[0], unnorm_image

## Keep a copy of unnormalized image to print using numpy later

norm_image, unnorm_image = transform_image(test_output)

"""##### Display image which unnormalized

### 4. Model Training
"""

def detect(network, data):

    prediction = network(data)  
    class_ids, scores, bounding_boxes = prediction
    
    return class_ids, scores, bounding_boxes
class_ids, scores, bounding_boxes = detect(network, norm_image)

"""##### Visualize the image with object detected found"""

ax = utils.viz.plot_bbox(unnorm_image, bounding_boxes[0], scores[0], class_ids[0], class_names=network.classes)
fig = plt.gcf()
fig.set_size_inches(14, 14)
plt.show()

"""### 5. Counting object"""

# import pandas as pd
def count_object(network, class_ids, scores, bounding_boxes, object_label, threshold=0.75):

    object_labels=[]
    for i in range(100):
        if scores[0][i].asnumpy()>threshold:
            iden = class_ids[0][i].asnumpy()[0].astype('int')
            object_labels.append(network.classes[iden])

    counts = 0
    if len(object_labels) >=1:
        for i in object_labels:
            if object_label == i:
                counts+=1
    else:
        pass
    return counts

"""### 6. Test whether object count is working"""

for object_label in ["person", "sports ball"]:
    count = count_object(network, class_ids, scores, bounding_boxes, object_label)
    print("{} objects of class '{}' detected".format(count, object_label))

num_people = count_object(network, class_ids, scores, bounding_boxes, "person")
num_people

thresholds = [0, 0.5, 0.75, 0.9, 0.99, 0.999]
for threshold in thresholds:
    num_people = count_object(network, class_ids, scores, bounding_boxes, "person", threshold=threshold)
    print("{} people detected using a threshold of {}.".format(num_people, threshold))

"""### 7. Create a people counter : Detect number of people in the image"""

class PersonCounter():
    def __init__(self, threshold):
        self._network = gcv.model_zoo.get_model('yolo3_darknet53_coco', pretrained=True)
        self._threshold = threshold

    def set_threshold(self, threshold):
        self._threshold = threshold
    
    def count(self, filepath, visualize=False):
        
        output = mx.image.imread(filepath)
        image = gcv.data.transforms.presets.yolo.transform_test(output)
        unnorm_image = image[0]
        prediction = self._network(unnorm_image)
        class_ids, scores, bounding_boxes = prediction

        object_labels=[]
        for i in range(100):
            if scores[0][i].asnumpy()>self._threshold:
                iden = class_ids[0][i].asnumpy()[0].astype('int')
                object_labels.append(self._network.classes[iden])

        num_people = 0
        if len(object_labels) >=1:
            for i in object_labels:
                if i == "person":
                    num_people+=1
        else:
            pass
        
        if visualize:
            self._visualize(image[1], class_ids, scores, bounding_boxes)
            
        if num_people == 1:
            print('{} person detected in {}.'.format(num_people, filepath)) 
        else:
            print('{} people detected in {}.'.format(num_people, filepath))
        return num_people
    
    def _visualize(self, unnorm_image, class_ids, scores, bounding_boxes):
        """
        Since the transformed_image is in NCHW layout and the values are normalized,
        this method slices and transposes to give CHW as required by matplotlib,
        and scales (-2, +2) to (0, 255) linearly.
        """
        ax = utils.viz.plot_bbox(unnorm_image,
                                 bounding_boxes[0],
                                 scores[0],
                                 class_ids[0],
                                 class_names=self._network.classes)
        fig = plt.gcf()
        fig.set_size_inches(14, 14)
        plt.show()

"""##### Test whether people counter is working"""

counter = PersonCounter(threshold=0.9)

assert counter.count('drive/My Drive/Courses_Workshop_Conferences/test/gluoncv_assignment6/31928213423_090ec29bcf_b.jpg') == 2
assert counter.count('drive/My Drive/Courses_Workshop_Conferences/test/gluoncv_assignment6/32701657536_8a0d9e157f_b.jpg') == 3
assert counter.count('drive/My Drive/Courses_Workshop_Conferences/test/gluoncv_assignment6/25751294956_fa3ee87fb8_b.jpg') == 4

# Try to put in lower threshold for more object detected, but subject to more error
counter.set_threshold(0.5)
# file size to big to print all
# assert counter.count('drive/My Drive/Courses_Workshop_Conferences/test/gluoncv_assignment6/25751294956_fa3ee87fb8_b.jpg', visualize=True) == 6

counter.count('drive/My Drive/Courses_Workshop_Conferences/test/gluoncv_assignment6/18611133536_534285f26d_b.jpg', visualize=True)

"""##### 8. Task is counting the total number of person in all the available images"""

total_count = 0
for filepath in glob.glob('drive/My Drive/Courses_Workshop_Conferences/test/gluoncv_assignment6/*.jpg'):
    total_count += counter.count(filepath)
print("### Summary: {} people detected.".format(total_count))

